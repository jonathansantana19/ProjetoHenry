/*  
 *
 * Software de comunicação 8x em java
 *
 * 
 */

package cliente8x;


import java.awt.Dialog.ModalExclusionType;
import tcpcom.TcpClient;
import java.util.Date;
import java.text.SimpleDateFormat;
import javax.swing.*;
import java.io.*;
import javax.swing.event.DocumentListener;
import javax.swing.event.DocumentEvent;


/**
 *
 */

public class FrmClient extends javax.swing.JFrame {

    private TcpClient client;

    /** Creates new form FrmMain */
    public FrmClient() {
        initComponents();
        this.setVisible(true);
        this.repaint();
        //Retirando Visibilidade de objetos não necessários inicialmente e
        //parametros iniciais de formulário
        jfProgresso.setLocationRelativeTo(null);
        jfSleep.setLocationRelativeTo(null);
        jfSleep.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
        ImageIcon ii = new ImageIcon(this.getClass().getResource(
                    "ampulheta.gif")); //animando o GIF
        jlbGif.setIcon(ii);
        jtpConfig.setVisible(false);
        jlbDiretorio.setVisible(false); 
        jtfDiretorio.setVisible(false);
        jbtnLerArquivo.setVisible(false);
        jbtnHoraSistema.setVisible(false);
        jfcArquivo.setVisible(false);
        jbtnAbrir.setVisible(false);
        jfSleep.setVisible(false);

        //configuração da caixa de dialogo para abrir arquivos de extensão .txt
        jfcArquivo.setFileFilter(new javax.swing.filechooser.FileFilter(){
            public boolean accept(File f){
                return f.getName().toLowerCase().endsWith(".txt")
                        || f.isDirectory();
            }
            public String getDescription() {
                return "Arquivos Texto (.txt)";
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */

    @SuppressWarnings("unchecked")



    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btngEnvRecDados = new javax.swing.ButtonGroup();
        btngParametro = new javax.swing.ButtonGroup();
        btngQdeStatus = new javax.swing.ButtonGroup();
        jfProgresso = new javax.swing.JFrame();
        jpProgresso = new javax.swing.JPanel();
        jpbProgresso = new javax.swing.JProgressBar();
        jlbX = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jlbY = new javax.swing.JLabel();
        jlbProcLoop = new javax.swing.JLabel();
        jlbPorcentagem = new javax.swing.JLabel();
        jfcArquivo = new javax.swing.JFileChooser();
        jfSleep = new javax.swing.JFrame();
        jpSleep = new javax.swing.JPanel();
        jlbAguarde = new javax.swing.JLabel();
        jlbGif = new javax.swing.JLabel();
        jlbStringRecebida = new javax.swing.JLabel();
        jspScroll = new javax.swing.JScrollPane();
        jtaDadosRec = new javax.swing.JTextArea();
        jpConexao = new javax.swing.JPanel();
        jlbIPServidor = new javax.swing.JLabel();
        jtfIp = new javax.swing.JTextField();
        jlbPorta = new javax.swing.JLabel();
        jtfPorta = new javax.swing.JTextField();
        jchkConectar = new javax.swing.JCheckBox();
        jlbConexao = new javax.swing.JLabel();
        jpEnvio = new javax.swing.JPanel();
        jlbPacoteEnviado = new javax.swing.JLabel();
        jtfEnvio = new javax.swing.JTextField();
        jbtnEnviar = new javax.swing.JButton();
        jlbDiretorio = new javax.swing.JLabel();
        jtfDiretorio = new javax.swing.JTextField();
        jbtnLerArquivo = new javax.swing.JButton();
        jbtnAbrir = new javax.swing.JButton();
        jscrpPacotes = new javax.swing.JScrollPane();
        jlstPacotes = new javax.swing.JList();
        jlbPacotesDisp = new javax.swing.JLabel();
        jrbEnvDados = new javax.swing.JRadioButton();
        jrbRecDados = new javax.swing.JRadioButton();
        jlbDescPcte = new javax.swing.JLabel();
        jscrpDescricao = new javax.swing.JScrollPane();
        jtaDescricao = new javax.swing.JTextArea();
        jscrpDadosEnv = new javax.swing.JScrollPane();
        jtaDadosEnv = new javax.swing.JTextArea();
        jlbStringEnviada = new javax.swing.JLabel();
        jscrpDadosByteEnv = new javax.swing.JScrollPane();
        jtaDadosBytesEnv = new javax.swing.JTextArea();
        jlbBytesEnviados = new javax.swing.JLabel();
        jscrpDadosByteRec = new javax.swing.JScrollPane();
        jtaDadosBytesRec = new javax.swing.JTextArea();
        jlbBytesRecebidos = new javax.swing.JLabel();
        jbtnLimparEnv = new javax.swing.JButton();
        jbtnLimparRec = new javax.swing.JButton();
        jbtnHoraSistema = new javax.swing.JButton();
        jtpConfig = new javax.swing.JTabbedPane();
        jpRegistros = new javax.swing.JPanel();
        jrbM = new javax.swing.JRadioButton();
        jrbN = new javax.swing.JRadioButton();
        jrbD = new javax.swing.JRadioButton();
        jrbT = new javax.swing.JRadioButton();
        jrbC = new javax.swing.JRadioButton();
        jpQtdeStatus = new javax.swing.JPanel();
        jrbU = new javax.swing.JRadioButton();
        jrbD2 = new javax.swing.JRadioButton();
        jrbTD = new javax.swing.JRadioButton();
        jrbR = new javax.swing.JRadioButton();
        jrbRNC = new javax.swing.JRadioButton();
        jrbC2 = new javax.swing.JRadioButton();
        jrbTP = new javax.swing.JRadioButton();
        jrbMRPE = new javax.swing.JRadioButton();
        jrbSEMP = new javax.swing.JRadioButton();
        jrbPP = new javax.swing.JRadioButton();
        jrbSP = new javax.swing.JRadioButton();
        jrbQP = new javax.swing.JRadioButton();
        jpEventoOnline = new javax.swing.JPanel();
        jlbMensagem = new javax.swing.JLabel();
        jtfLiberado = new javax.swing.JTextField();
        jlbTempoRM = new javax.swing.JLabel();
        jtfTextoSeg = new javax.swing.JTextField();
        jlbSegundos = new javax.swing.JLabel();
        jlbRele1 = new javax.swing.JLabel();
        jlbRele2 = new javax.swing.JLabel();
        jlbRele3 = new javax.swing.JLabel();
        jchkRele1 = new javax.swing.JCheckBox();
        jchkRele2 = new javax.swing.JCheckBox();
        jchkRele3 = new javax.swing.JCheckBox();
        jpArquivo = new javax.swing.JPanel();
        jlbQtdeLoop = new javax.swing.JLabel();
        jtfQtdeLoop = new javax.swing.JTextField();
        jbtnLoop = new javax.swing.JButton();
        jlbLoopInf = new javax.swing.JLabel();
        jchkLoopInf = new javax.swing.JCheckBox();

        jfProgresso.setTitle("Progresso");
        jfProgresso.setMinimumSize(new java.awt.Dimension(275, 180));

        jpProgresso.setBorder(javax.swing.BorderFactory.createTitledBorder("Progresso"));

        jlbX.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jlbX.setText("0");

        jLabel2.setText("de");

        jlbY.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jlbY.setText("Y");

        jlbProcLoop.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlbProcLoop.setText("Processando loop 1 de 1");

        jlbPorcentagem.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlbPorcentagem.setText("0%");

        javax.swing.GroupLayout jpProgressoLayout = new javax.swing.GroupLayout(jpProgresso);
        jpProgresso.setLayout(jpProgressoLayout);
        jpProgressoLayout.setHorizontalGroup(
            jpProgressoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jlbProcLoop, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpProgressoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlbX, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jlbY, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpProgressoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jpbProgresso, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jpProgressoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlbPorcentagem, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );
        jpProgressoLayout.setVerticalGroup(
            jpProgressoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpProgressoLayout.createSequentialGroup()
                .addComponent(jlbProcLoop)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpbProgresso, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                .addGap(7, 7, 7)
                .addComponent(jlbPorcentagem)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpProgressoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpProgressoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jlbX)
                        .addComponent(jLabel2))
                    .addComponent(jlbY))
                .addGap(19, 19, 19))
        );

        javax.swing.GroupLayout jfProgressoLayout = new javax.swing.GroupLayout(jfProgresso.getContentPane());
        jfProgresso.getContentPane().setLayout(jfProgressoLayout);
        jfProgressoLayout.setHorizontalGroup(
            jfProgressoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jfProgressoLayout.createSequentialGroup()
                .addContainerGap(11, Short.MAX_VALUE)
                .addComponent(jpProgresso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jfProgressoLayout.setVerticalGroup(
            jfProgressoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jfProgressoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jpProgresso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jfcArquivo.setDialogTitle("Abrir Arquivo");

        jfSleep.setTitle("Sleep");
        jfSleep.setAlwaysOnTop(true);
        jfSleep.setMinimumSize(new java.awt.Dimension(185, 150));

        jpSleep.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jlbAguarde.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jlbAguarde.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlbAguarde.setText("Aguarde...");

        jlbGif.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cliente8x/ampulheta.gif"))); // NOI18N

        javax.swing.GroupLayout jpSleepLayout = new javax.swing.GroupLayout(jpSleep);
        jpSleep.setLayout(jpSleepLayout);
        jpSleepLayout.setHorizontalGroup(
            jpSleepLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpSleepLayout.createSequentialGroup()
                .addGroup(jpSleepLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpSleepLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jlbAguarde, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE))
                    .addGroup(jpSleepLayout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(jlbGif)))
                .addContainerGap())
        );
        jpSleepLayout.setVerticalGroup(
            jpSleepLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpSleepLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jlbAguarde)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jlbGif)
                .addContainerGap(46, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jfSleepLayout = new javax.swing.GroupLayout(jfSleep.getContentPane());
        jfSleep.getContentPane().setLayout(jfSleepLayout);
        jfSleepLayout.setHorizontalGroup(
            jfSleepLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jfSleepLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jpSleep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jfSleepLayout.setVerticalGroup(
            jfSleepLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jfSleepLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jpSleep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Cliente 8X");

        jlbStringRecebida.setText("String Recebida:");

        jtaDadosRec.setColumns(20);
        jtaDadosRec.setEditable(false);
        jtaDadosRec.setLineWrap(true);
        jtaDadosRec.setRows(5);
        jspScroll.setViewportView(jtaDadosRec);

        jpConexao.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jlbIPServidor.setText("IP Servidor:");

        jtfIp.setText("192.168.0.223");

        jlbPorta.setText("Porta:");

        jtfPorta.setText("3000");

        jchkConectar.setText("Conectar");
        jchkConectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jchkConectarActionPerformed(evt);
            }
        });

        jlbConexao.setText("Nenhuma Conexão Ativa");
        jlbConexao.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jpConexaoLayout = new javax.swing.GroupLayout(jpConexao);
        jpConexao.setLayout(jpConexaoLayout);
        jpConexaoLayout.setHorizontalGroup(
            jpConexaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpConexaoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpConexaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpConexaoLayout.createSequentialGroup()
                        .addComponent(jlbConexao, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jpConexaoLayout.createSequentialGroup()
                        .addGroup(jpConexaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlbIPServidor)
                            .addComponent(jlbPorta))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jpConexaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtfIp, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                            .addComponent(jtfPorta, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpConexaoLayout.createSequentialGroup()
                        .addComponent(jchkConectar)
                        .addGap(55, 55, 55))))
        );
        jpConexaoLayout.setVerticalGroup(
            jpConexaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpConexaoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpConexaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlbIPServidor)
                    .addComponent(jtfIp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jpConexaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlbPorta)
                    .addComponent(jtfPorta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jchkConectar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jlbConexao, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jlbConexao.getAccessibleContext().setAccessibleName("");

        jpEnvio.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jlbPacoteEnviado.setText("Pacote a ser enviado:");

        jbtnEnviar.setText("Enviar Pacote");
        jbtnEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnEnviarActionPerformed(evt);
            }
        });

        jlbDiretorio.setText("Diretório:");

        jbtnLerArquivo.setText("Ler Arquivo");
        jbtnLerArquivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnLerArquivoActionPerformed(evt);
            }
        });

        jbtnAbrir.setText("...");
        jbtnAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnAbrirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpEnvioLayout = new javax.swing.GroupLayout(jpEnvio);
        jpEnvio.setLayout(jpEnvioLayout);
        jpEnvioLayout.setHorizontalGroup(
            jpEnvioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpEnvioLayout.createSequentialGroup()
                .addGroup(jpEnvioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jpEnvioLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jlbPacoteEnviado)
                        .addGap(18, 18, 18)
                        .addComponent(jtfEnvio, javax.swing.GroupLayout.DEFAULT_SIZE, 849, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jpEnvioLayout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(jlbDiretorio)
                        .addGap(18, 18, 18)
                        .addComponent(jtfDiretorio, javax.swing.GroupLayout.DEFAULT_SIZE, 851, Short.MAX_VALUE)))
                .addGroup(jpEnvioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jpEnvioLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbtnAbrir, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jbtnLerArquivo, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpEnvioLayout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(jbtnEnviar)
                        .addGap(8, 8, 8))))
        );
        jpEnvioLayout.setVerticalGroup(
            jpEnvioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpEnvioLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpEnvioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfEnvio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlbPacoteEnviado)
                    .addComponent(jbtnEnviar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpEnvioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpEnvioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jtfDiretorio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jbtnLerArquivo)
                        .addComponent(jbtnAbrir))
                    .addComponent(jlbDiretorio))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jlstPacotes.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Configurações", "Empregador", "Usuários", "Data Hora", "Biometria", "Registros", "Quantidade e Status", "Cartão", "Grupo de Acesso", "Cartão Grupo de Acesso", "Acionamento", "Período", "Horário", "Feriado", "Mensagem", "Evento Online", "Arquivo" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jlstPacotes.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jlstPacotes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jlstPacotesMouseClicked(evt);
            }
        });
        jscrpPacotes.setViewportView(jlstPacotes);

        jlbPacotesDisp.setText("Pacotes Disponíveis:");

        btngEnvRecDados.add(jrbEnvDados);
        jrbEnvDados.setSelected(true);
        jrbEnvDados.setText("Enviar Dados");
        jrbEnvDados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbEnvDadosActionPerformed(evt);
            }
        });

        btngEnvRecDados.add(jrbRecDados);
        jrbRecDados.setText("Receber Dados");
        jrbRecDados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbRecDadosActionPerformed(evt);
            }
        });

        jlbDescPcte.setText("Descrição do Pacote:");

        jscrpDescricao.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jtaDescricao.setColumns(20);
        jtaDescricao.setLineWrap(true);
        jtaDescricao.setRows(5);
        jtaDescricao.setRequestFocusEnabled(false);
        jscrpDescricao.setViewportView(jtaDescricao);

        jtaDadosEnv.setColumns(20);
        jtaDadosEnv.setEditable(false);
        jtaDadosEnv.setLineWrap(true);
        jtaDadosEnv.setRows(5);
        jscrpDadosEnv.setViewportView(jtaDadosEnv);

        jlbStringEnviada.setText("String Enviada:");

        jtaDadosBytesEnv.setColumns(20);
        jtaDadosBytesEnv.setEditable(false);
        jtaDadosBytesEnv.setLineWrap(true);
        jtaDadosBytesEnv.setRows(5);
        jscrpDadosByteEnv.setViewportView(jtaDadosBytesEnv);

        jlbBytesEnviados.setText("Bytes Enviados");

        jscrpDadosByteRec.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jscrpDadosByteRec.setAutoscrolls(true);

        jtaDadosBytesRec.setColumns(20);
        jtaDadosBytesRec.setEditable(false);
        jtaDadosBytesRec.setLineWrap(true);
        jtaDadosBytesRec.setRows(5);
        jscrpDadosByteRec.setViewportView(jtaDadosBytesRec);

        jlbBytesRecebidos.setText("Bytes Recebidos:");

        jbtnLimparEnv.setText("Limpar");
        jbtnLimparEnv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnLimparEnvActionPerformed(evt);
            }
        });

        jbtnLimparRec.setText("Limpar");
        jbtnLimparRec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnLimparRecActionPerformed(evt);
            }
        });

        jbtnHoraSistema.setText("Ajustar com Hora do Sistema");
        jbtnHoraSistema.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnHoraSistemaActionPerformed(evt);
            }
        });

        jtpConfig.setToolTipText("");
        jtpConfig.setEnabled(false);

        jpRegistros.setBorder(javax.swing.BorderFactory.createTitledBorder("Parâmetro"));

        btngParametro.add(jrbM);
        jrbM.setText("M");
        jrbM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbMActionPerformed(evt);
            }
        });

        btngParametro.add(jrbN);
        jrbN.setText("N");
        jrbN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbNActionPerformed(evt);
            }
        });

        btngParametro.add(jrbD);
        jrbD.setText("D");
        jrbD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbDActionPerformed(evt);
            }
        });

        btngParametro.add(jrbT);
        jrbT.setText("T");
        jrbT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbTActionPerformed(evt);
            }
        });

        btngParametro.add(jrbC);
        jrbC.setText("C");
        jrbC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbCActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpRegistrosLayout = new javax.swing.GroupLayout(jpRegistros);
        jpRegistros.setLayout(jpRegistrosLayout);
        jpRegistrosLayout.setHorizontalGroup(
            jpRegistrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpRegistrosLayout.createSequentialGroup()
                .addGap(86, 86, 86)
                .addGroup(jpRegistrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jrbC)
                    .addComponent(jrbT)
                    .addComponent(jrbD)
                    .addComponent(jrbN)
                    .addComponent(jrbM))
                .addContainerGap(88, Short.MAX_VALUE))
        );
        jpRegistrosLayout.setVerticalGroup(
            jpRegistrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpRegistrosLayout.createSequentialGroup()
                .addComponent(jrbM)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jrbN)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jrbD)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jrbT)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jrbC)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jtpConfig.addTab("tab1", jpRegistros);

        btngQdeStatus.add(jrbU);
        jrbU.setText("U");
        jrbU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbUActionPerformed(evt);
            }
        });

        btngQdeStatus.add(jrbD2);
        jrbD2.setText("D");
        jrbD2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbD2ActionPerformed(evt);
            }
        });

        btngQdeStatus.add(jrbTD);
        jrbTD.setText("TD");
        jrbTD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbTDActionPerformed(evt);
            }
        });

        btngQdeStatus.add(jrbR);
        jrbR.setText("R");
        jrbR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbRActionPerformed(evt);
            }
        });

        btngQdeStatus.add(jrbRNC);
        jrbRNC.setText("RNC");
        jrbRNC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbRNCActionPerformed(evt);
            }
        });

        btngQdeStatus.add(jrbC2);
        jrbC2.setText("C");
        jrbC2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbC2ActionPerformed(evt);
            }
        });

        btngQdeStatus.add(jrbTP);
        jrbTP.setText("TP");
        jrbTP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbTPActionPerformed(evt);
            }
        });

        btngQdeStatus.add(jrbMRPE);
        jrbMRPE.setText("MRPE");
        jrbMRPE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbMRPEActionPerformed(evt);
            }
        });

        btngQdeStatus.add(jrbSEMP);
        jrbSEMP.setText("SEMP");
        jrbSEMP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbSEMPActionPerformed(evt);
            }
        });

        btngQdeStatus.add(jrbPP);
        jrbPP.setText("PP");
        jrbPP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbPPActionPerformed(evt);
            }
        });

        btngQdeStatus.add(jrbSP);
        jrbSP.setText("SP");
        jrbSP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbSPActionPerformed(evt);
            }
        });

        btngQdeStatus.add(jrbQP);
        jrbQP.setText("QP");
        jrbQP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbQPActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpQtdeStatusLayout = new javax.swing.GroupLayout(jpQtdeStatus);
        jpQtdeStatus.setLayout(jpQtdeStatusLayout);
        jpQtdeStatusLayout.setHorizontalGroup(
            jpQtdeStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpQtdeStatusLayout.createSequentialGroup()
                .addContainerGap(37, Short.MAX_VALUE)
                .addGroup(jpQtdeStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jrbD2)
                    .addComponent(jrbU)
                    .addComponent(jrbR)
                    .addComponent(jrbTD)
                    .addComponent(jrbRNC)
                    .addComponent(jrbC2))
                .addGap(42, 42, 42)
                .addGroup(jpQtdeStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jrbMRPE)
                    .addComponent(jrbTP)
                    .addComponent(jrbSEMP)
                    .addComponent(jrbPP)
                    .addComponent(jrbSP)
                    .addComponent(jrbQP))
                .addGap(40, 40, 40))
        );
        jpQtdeStatusLayout.setVerticalGroup(
            jpQtdeStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpQtdeStatusLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpQtdeStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jpQtdeStatusLayout.createSequentialGroup()
                        .addGroup(jpQtdeStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jrbU)
                            .addComponent(jrbTP))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jrbD2))
                    .addComponent(jrbMRPE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpQtdeStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jrbTD)
                    .addComponent(jrbSEMP))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpQtdeStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jrbR)
                    .addComponent(jrbPP))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpQtdeStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jrbRNC)
                    .addComponent(jrbSP))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpQtdeStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jrbC2)
                    .addComponent(jrbQP))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jtpConfig.addTab("tab2", jpQtdeStatus);

        jlbMensagem.setText("Mensagem:");

        jtfLiberado.setText("LIBERADO");

        jlbTempoRM.setText("Tempo Rele / Msg:");

        jtfTextoSeg.setText("3");

        jlbSegundos.setText("Segundos");

        jlbRele1.setText("Rele 1");

        jlbRele2.setText("Rele 2");

        jlbRele3.setText("Rele 3");

        jchkRele1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jchkRele1ActionPerformed(evt);
            }
        });

        jchkRele2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jchkRele2ActionPerformed(evt);
            }
        });

        jchkRele3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jchkRele3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpEventoOnlineLayout = new javax.swing.GroupLayout(jpEventoOnline);
        jpEventoOnline.setLayout(jpEventoOnlineLayout);
        jpEventoOnlineLayout.setHorizontalGroup(
            jpEventoOnlineLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpEventoOnlineLayout.createSequentialGroup()
                .addGroup(jpEventoOnlineLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpEventoOnlineLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jtfLiberado, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE))
                    .addGroup(jpEventoOnlineLayout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(jpEventoOnlineLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpEventoOnlineLayout.createSequentialGroup()
                                .addGroup(jpEventoOnlineLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jlbRele1)
                                    .addComponent(jchkRele1))
                                .addGap(18, 18, 18)
                                .addGroup(jpEventoOnlineLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jlbRele2)
                                    .addComponent(jchkRele2))
                                .addGap(18, 18, 18)
                                .addGroup(jpEventoOnlineLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jchkRele3)
                                    .addComponent(jlbRele3)))
                            .addGroup(jpEventoOnlineLayout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addGroup(jpEventoOnlineLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jpEventoOnlineLayout.createSequentialGroup()
                                        .addComponent(jtfTextoSeg, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jlbSegundos))
                                    .addComponent(jlbTempoRM)))))
                    .addGroup(jpEventoOnlineLayout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addComponent(jlbMensagem)))
                .addContainerGap())
        );
        jpEventoOnlineLayout.setVerticalGroup(
            jpEventoOnlineLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpEventoOnlineLayout.createSequentialGroup()
                .addComponent(jlbMensagem)
                .addGap(1, 1, 1)
                .addComponent(jtfLiberado, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jlbTempoRM)
                .addGap(4, 4, 4)
                .addGroup(jpEventoOnlineLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfTextoSeg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlbSegundos))
                .addGap(11, 11, 11)
                .addGroup(jpEventoOnlineLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlbRele1)
                    .addComponent(jlbRele2)
                    .addComponent(jlbRele3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jpEventoOnlineLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jchkRele1)
                    .addComponent(jchkRele2)
                    .addComponent(jchkRele3))
                .addGap(26, 26, 26))
        );

        jtpConfig.addTab("tab3", jpEventoOnline);

        jlbQtdeLoop.setText("Quantidade de Loop:");

        jtfQtdeLoop.setText("1");

        jbtnLoop.setText("Loop");
        jbtnLoop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnLoopActionPerformed(evt);
            }
        });

        jlbLoopInf.setText("Loop Infinito:");

        javax.swing.GroupLayout jpArquivoLayout = new javax.swing.GroupLayout(jpArquivo);
        jpArquivo.setLayout(jpArquivoLayout);
        jpArquivoLayout.setHorizontalGroup(
            jpArquivoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpArquivoLayout.createSequentialGroup()
                .addContainerGap(53, Short.MAX_VALUE)
                .addGroup(jpArquivoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpArquivoLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jlbQtdeLoop))
                    .addComponent(jtfQtdeLoop, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jpArquivoLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jbtnLoop))
                    .addGroup(jpArquivoLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jlbLoopInf)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jchkLoopInf)))
                .addGap(46, 46, 46))
        );
        jpArquivoLayout.setVerticalGroup(
            jpArquivoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpArquivoLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jlbQtdeLoop)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtfQtdeLoop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jbtnLoop)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpArquivoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jlbLoopInf, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jchkLoopInf, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jtpConfig.addTab("tab4", jpArquivo);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(482, 482, 482)
                .addComponent(jbtnLimparEnv)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 615, Short.MAX_VALUE)
                .addComponent(jbtnLimparRec)
                .addGap(141, 141, 141))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(61, 61, 61)
                                .addComponent(jlbStringEnviada)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(53, 53, 53)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jscrpDadosEnv, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jscrpDadosByteEnv, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 547, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jspScroll)
                            .addComponent(jscrpDadosByteRec, javax.swing.GroupLayout.DEFAULT_SIZE, 603, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addComponent(jlbStringRecebida))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(255, 255, 255)
                        .addComponent(jrbEnvDados)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jrbRecDados)
                        .addGap(6, 6, 6)
                        .addComponent(jbtnHoraSistema, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(17, 17, 17))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jlbBytesEnviados)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 580, Short.MAX_VALUE)
                                .addComponent(jlbBytesRecebidos)
                                .addGap(476, 476, 476))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jpEnvio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(57, 57, 57))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jpConexao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jscrpPacotes, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jlbPacotesDisp))
                                        .addGap(19, 19, 19)
                                        .addComponent(jtpConfig, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jscrpDescricao, javax.swing.GroupLayout.DEFAULT_SIZE, 534, Short.MAX_VALUE)
                                                .addGap(35, 35, 35))
                                            .addComponent(jlbDescPcte))))))))
                .addGap(93, 93, 93))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jtpConfig, 0, 0, Short.MAX_VALUE)
                    .addComponent(jpConexao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlbPacotesDisp)
                            .addComponent(jlbDescPcte))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jscrpDescricao, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                            .addComponent(jscrpPacotes, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbtnHoraSistema, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jrbRecDados, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jrbEnvDados, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(11, 11, 11)
                .addComponent(jpEnvio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlbBytesEnviados)
                    .addComponent(jlbBytesRecebidos))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jscrpDadosByteEnv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jlbStringEnviada))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jscrpDadosByteRec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jlbStringRecebida)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jspScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)
                    .addComponent(jscrpDadosEnv, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtnLimparEnv)
                    .addComponent(jbtnLimparRec))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public boolean validarNumero(String txt){
        try{
            int num = Integer.parseInt(txt);
            return true;
        }catch(NumberFormatException e){
            return false;
        }
    }

    public void progress(int a){//alterar barra de progresso
        int b =Integer.parseInt(jlbX.getText())+1;
        int porcentagem = (b*100)/Integer.parseInt(jlbY.getText());
        jlbPorcentagem.setText(Integer.toString(porcentagem)+"%");
        jlbX.setText(Integer.toString(b));
        jpbProgresso.setValue(b);
    }

    public String textFormat (char[] data){
        String aux="", aux2 ="", str="";
        char BYTE_INIT, BYTE_END, BYTE_TAM[] = {0,0}, BYTE_CKSUM;
        BYTE_INIT = (char)Integer.valueOf("2", 16).intValue();//conf. bit inicial
        BYTE_END = (char)Integer.valueOf("3", 16).intValue();//conf. bit final
        BYTE_TAM[0] = (char)data.length;//conf. tamanho dos dados
        BYTE_TAM[1] = (char)Integer.valueOf("0", 16).intValue();
        aux2 += BYTE_INIT; //Inserindo byte inicial
        aux2 += BYTE_TAM[0]; //Inserindo byte do tamanho
        aux2 += BYTE_TAM[1];
        for (char chr : data) {
            str += chr;
        }
        aux = new String (aux2+str); // concatenando com a informação

        BYTE_CKSUM = aux.charAt(1);//Calculo do Checksum
        for (int a=2; a<aux.length();a++){
            BYTE_CKSUM = (char) (BYTE_CKSUM ^ aux.charAt(a));
        }
        aux += BYTE_CKSUM; //Inserindo Checksum
        aux += BYTE_END; //Inserindo byte Final
        return aux;

    }

    public String stringHexFormat(String str){
        String aux = "", temp = "";
        for (char ch : str.toCharArray()){
                temp += Integer.toHexString(ch).toUpperCase();
                //Converte Hexa em String
                if (temp.length()==1){
                    aux += "0"+temp+" ";//se tiver 1 digito complementa com 0
                }
                else{
                    aux+=temp+" ";
                }
                temp = new String ();
        }
        return aux;
    }

    public class gravarDados extends Thread{
     @Override
     public void run() {
         File file = new File (jtfDiretorio.getText()),
                resposta = new File ("Resposta.txt");
        if (file.exists()){ //verificar se arquivo existe
            try{
                //construtores de edição
                jfProgresso.setVisible(true);
                //inicia parametros para leitura e graação de arquivos
                FileWriter writer = new FileWriter (resposta);
                PrintWriter saida = new PrintWriter(writer,true);
                FileReader reader = new FileReader (file.getPath());
                BufferedReader leitor = new BufferedReader(reader);
                PrintWriter s_resposta = new PrintWriter
                        (new FileWriter (resposta),true);
                String linha, nextLine;
                LineNumberReader lineCounter = new LineNumberReader
                   (new InputStreamReader(new FileInputStream(file.getPath())));
                try{//Contagem das linhas do arquivo
                    while((nextLine = lineCounter.readLine()) != null){
                        if (nextLine == null)
                            break;
                        }
                }catch(Exception done){
                    done.printStackTrace();
                }
                jlbX.setText(Integer.toString(0));
                jlbY.setText(Integer.toString(lineCounter.getLineNumber()));
                jpbProgresso.setMinimum(Integer.parseInt(jlbX.getText()));
                jpbProgresso.setMaximum(Integer.parseInt(jlbY.getText()));
                while ((linha = leitor.readLine()) != null){
                    progress (Integer.parseInt(jlbY.getText()));
                    int a=0, b=0;
                    //recebe a linha do arquivo txt
                    linha.trim();
                    if (!(linha.substring(0, 1).equals("//")) &&
                            !(linha.trim().equals(""))){
                        //verifica se a linha não contem '//' ou espaço vazio
                        a=linha.indexOf("*pause*");
                        if(a<0){ // se não contem pause
                            b=linha.indexOf("*sleep*");
                            if(b<0){ //se não contem sleep
                                saida.println("Mensagem:  01+"+ linha);
                                jtfEnvio.setText("01+"+linha);
                                client.sendData(textFormat(jtfEnvio.getText().
                                            toCharArray()).toCharArray());
                                //envia os dados formatados
                                try{
                                    Thread.sleep(500);
                                }catch(Exception e){
                                    e.printStackTrace();
                                }//tempo para resposta
                                saida.println("Resposta: "+jtaDadosRec.getText()+"\n");
                                //grava dados e limpa campos de texto
                                jtaDadosRec.setText(" ");
                                jtaDadosBytesRec.setText(" ");
                            }
                            else{
                                try{
                                    jfSleep.setVisible(true);
                                    jfSleep.setModalExclusionType(ModalExclusionType.APPLICATION_EXCLUDE);
                                    System.out.println(linha.substring(7));
                                    Thread.sleep(Integer.parseInt
                                            (linha.substring(7).trim()));
                                    jfSleep.setVisible(false);
                                }catch(Exception e){
                                    e.printStackTrace();
                                }
                            }
                        }
                        else{
                            JOptionPane.showMessageDialog(null, "Pause");
                        }
                    }
                        else{
                        s_resposta.println(linha);
                    }
                }
                writer.close();    //fechando os construtores de edição
                saida.close();
                reader.close();
                leitor.close();
                lineCounter.close();
                s_resposta.close();
                jfProgresso.setVisible(false);
            }catch(IOException e){
                JOptionPane.showMessageDialog(null, "Falha ao ler arquivo!",
                        "Erro", JOptionPane.WARNING_MESSAGE);
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Falha ao ler arquivo ou " +
                "arquivo inexistente!", "Erro", JOptionPane.WARNING_MESSAGE);
        }
      }
    }

    public void changeTextField (){
        //Alterar dados do campo de Envio conforme o Evento Online
        String aux = "";
        if (jchkRele1.isSelected()){
            aux += "1";
        }
        if (jchkRele2.isSelected()){
            aux += "2";
        }
        if (jchkRele3.isSelected()){
            aux += "3";
        }
        if (jrbEnvDados.isSelected()){  //formata com 1 caso Liberado
            jtfEnvio.setText("+REON+00+1]"+jtfTextoSeg.getText().trim()+"]"+
            jtfLiberado.getText()+"]"+aux);
        }
        else if(jrbRecDados.isSelected()){ //formata com 30 caso Negado
            jtfEnvio.setText("+REON+00+30]"+jtfTextoSeg.getText().trim()+"]"+
            jtfLiberado.getText()+"]"+aux);
        }
    }

    public void documentListener(){
    new Thread(new Runnable() {//definindo thread
        
        public void run() {
             //Configura os DocuemntListener dos campos jtfTextoSeg e
             //jtfLiberado para alterar quando digitados
            jtfTextoSeg.getDocument().addDocumentListener(new DocumentListener() {
                public void changedUpdate(DocumentEvent e){
                    changeTextField();
                }
                public void removeUpdate(DocumentEvent e) {
                    changeTextField();
                }
                public void insertUpdate(DocumentEvent e) {    
                    changeTextField();
                }
            });
            jtfLiberado.getDocument().addDocumentListener(new DocumentListener() {
                public void changedUpdate(DocumentEvent e){
                    changeTextField();
                }
                public void removeUpdate(DocumentEvent e) {
                    changeTextField();
                }
                public void insertUpdate(DocumentEvent e) {
                    changeTextField();
                }
            });
            changeTextField ();
            //Enquanto o item da lista for o Evento Online, a função irá ler o
            //jtaDadosRec e buscar a ultima resposta de evento do aparelho e
            //concatenar o numero de resposta com a string de Envio
            while (jlstPacotes.isSelectedIndex(15)){
                try {
                    String str = "", aux = "", aux2 = "";
                    int pos;
                    str = jtaDadosRec.getText();
                    pos = str.lastIndexOf("+REON+00+0");
                    changeTextField();
                    aux = jtfEnvio.getText();
                    aux2 += str.charAt(pos-2);
                    aux2 += str.charAt(pos-1);
                    aux2 += aux;
                    jtfEnvio.setText(aux2);
                    try{
                        Thread.sleep(500);
                    }catch(Exception e){
                        e.printStackTrace();
                    }//tempo para resposta
                } catch (Exception e) {
                }
            }
     }
     }).start();
    }
    
    public class loop extends Thread{
        @Override
        //Thread do loop de arquivo
        public void run() {
            int cont =1;
            if (!(validarNumero(jtfQtdeLoop.getText()))){
                JOptionPane.showMessageDialog(null, "Digite um número válido!",
                        "Erro", JOptionPane.WARNING_MESSAGE);
                jtfQtdeLoop.setText("1");
                
            }else{
              while(cont <= Integer.parseInt(jtfQtdeLoop.getText())
                    || jchkLoopInf.isSelected()){
                //verifica o numero de loops ou infinito caso a caixa de seleção
                //esteja selecionada
                if (jchkLoopInf.isSelected()){
                    jlbProcLoop.setText("Processando loop "+Integer.toString(cont)
                        +" de ∞");
                }else{
                    jlbProcLoop.setText("Processando loop "+Integer.toString(cont)
                        +" de "+jtfQtdeLoop.getText());
                }
                gravarDados gd = new gravarDados();
                gd.start();
                while (gd.isAlive()){
                    try{
                        Thread.sleep(10);
                    }catch(Exception e){
                    }
                }
                cont++;
              }
            }
        }
    }

    public void selectData(){
        //Ocultando botões não necessários
        jtpConfig.setVisible(false);
        jtfDiretorio.setVisible(false);
        jbtnLerArquivo.setVisible(false);
        jbtnHoraSistema.setVisible(false);
        jfcArquivo.setVisible(false);
        jbtnAbrir.setVisible(false);
        jrbEnvDados.setText("Enviar Dados");
        jrbRecDados.setText("Receber Dados");
        if (jlstPacotes.isSelectedIndex(0)){//verifica item selecionado no jList
         jtaDescricao.setText (" ");//Editando o jTextArea conforme selecionado
         jtaDescricao.append("                Prisma / Primme / PrimmeAcesso\n");
         jtaDescricao.append("\n");
         jtaDescricao.append("Enviar: Envia configurações ao equipamento.\n");
         jtaDescricao.append("Exemplo: 01+EC+00+HAB_TECLADO[H] Habilita o teclado.\n");
         jtaDescricao.append("\n");
         jtaDescricao.append("Receber: Recebe configurações.\n");
         jtaDescricao.append("Exemplo: 01+RC+00+IP Recebe IP do equipamento.");
         if (jrbEnvDados.isSelected()){  //Altera jtfEnvio conforme Enviar Dados
             jtfEnvio.setText("01+EC+00+HAB_TECLADO[H]");
         }
         else if (jrbRecDados.isSelected()){ //Altera jtfEnvio c/ Receber Dados
             jtfEnvio.setText("01+RC+00+IP");
         }//Mesma Formataçao de parâmetros para os demais itens da Lista
        }
        else if (jlstPacotes.isSelectedIndex(1)){
         jtaDescricao.setText (" ");
         jtaDescricao.append("                Prisma / Primme / PrimmeAcesso\n");
         jtaDescricao.append("\n");
         jtaDescricao.append("Enviar: Envia um empregador ao equipamento.\n");
         jtaDescricao.append("Exemplo: 01+EE+00+2]00000000001]]Empresa Teste"
                 + "]Pinhais Define o empregador como: Empresa Teste e o local"
                 + " como:   Pinhais.\n");
         jtaDescricao.append("\n");
         jtaDescricao.append("Receber: Recebe o empregador do equipamento.\n");
         jtaDescricao.append("Exemplo: 01+RC+00+IP Recebe IP do equipamento.");
         if (jrbEnvDados.isSelected()){
             jtfEnvio.setText("01+EE+00+2]00000000001]]Empresa Teste]Pinhais");
         }
         else if (jrbRecDados.isSelected()){
             jtfEnvio.setText("01+RE+00");
         }
        }
        else if (jlstPacotes.isSelectedIndex(2)){
         jtaDescricao.setText (" ");
         jtaDescricao.append("                Prisma / Primme / PrimmeAcesso\n");
         jtaDescricao.append("\n");
         jtaDescricao.append("Enviar: Envia uma lista de usuários.\n");
         jtaDescricao.append("Exemplo: 01+EU+00+1+I[123123123123[" +
                 "TESTE[0[1[000023 Inclui um usuário.\n");
         jtaDescricao.append("\n");
         jtaDescricao.append("Receber: Recebe uma lista de usuários.\n");
         jtaDescricao.append("Exemplo: 01+RU+00+3]1 Recebe 3 usuários cadastrados" +
                 " à partir do índice 1.");
         if (jrbEnvDados.isSelected()){
             jtfEnvio.setText("01+EU+00+1+I[123123123123[TESTE[0[1[000023");
         }
         else if (jrbRecDados.isSelected()){
             jtfEnvio.setText("01+RU+00+3]1");
         }
        }
        else if (jlstPacotes.isSelectedIndex(3)){
         jtaDescricao.setText (" ");
         jtaDescricao.append("                Prisma / Primme / PrimmeAcesso\n");
         jtaDescricao.append("\n");
         jtaDescricao.append("Enviar: Envia data e hora ao equipamento.\n");
         jtaDescricao.append("Exemplo: 01+EH+00+09/07/12 16:44:00]00/00/00]" +
                 "00/00/00 Envia a data de 09/07/12 às 16:44:00 sem horário " +
                 "de verão.\n");
         jtaDescricao.append("\n");
         jtaDescricao.append("Receber: Recebe data e hora do equipamento.\n");
         jtaDescricao.append("Exemplo: 01+RH+00");
         if (jrbEnvDados.isSelected()){
             jtfEnvio.setText("01+EH+00+09/07/12 16:44:00]00/00/00]00/00/00");
             jbtnHoraSistema.setVisible(true); //Receber hora do Sistema
         }
         else if (jrbRecDados.isSelected()){
             jtfEnvio.setText("01+RH+00");
         }
        }
        else if (jlstPacotes.isSelectedIndex(4)){
         jtaDescricao.setText (" ");
         jtaDescricao.append("                Prisma / Primme / PrimmeAcesso\n");
         jtaDescricao.append("\n");
         jtaDescricao.append("Enviar: Envia uma lista de digitais.\n");
         jtaDescricao.append("\n");
         jtaDescricao.append("Receber: Recebe uma lista de digitais.\n");
         jtaDescricao.append("Exemplo: 01+RD+00+L]2}0 Recebe uma listagem de 2 " +
                 "usuários à paritr do índice 0 que possui digitais " +
                 "cadastradas.\n");
         if (jrbEnvDados.isSelected()){
             jtfEnvio.setText("01+ED+00+");
         }
         else if (jrbRecDados.isSelected()){
             jtfEnvio.setText("01+RD+00+L]2}0");
         }
        }
        else if (jlstPacotes.isSelectedIndex(5)){
         jtaDescricao.setText (" ");
         jtaDescricao.append("                Prisma / Primme / PrimmeAcesso\n");
         jtaDescricao.append("\n");
         jtaDescricao.append("Enviar: Não possui função de envio.\n");
         jtaDescricao.append("\n");
         jtaDescricao.append("Receber: Recebe lista de registros.\n");
         jtaDescricao.append("");
         if (jrbEnvDados.isSelected()){
             jtfEnvio.setText(" ");
         }
         else if (jrbRecDados.isSelected()){
             jtfEnvio.setText("01+RR+00+");
             jtpConfig.setVisible(true); //Configurações de Registros
             jtpConfig.setSelectedIndex(0);
         }
        }
         else if (jlstPacotes.isSelectedIndex(6)){
         jtaDescricao.setText (" ");
         jtaDescricao.append("                Prisma / Primme / PrimmeAcesso\n");
         jtaDescricao.append("\n");
         jtaDescricao.append("Enviar: Não possui função de envio.\n");
         jtaDescricao.append("\n");
         jtaDescricao.append("Receber: Recebe quantidade ou status.\n");
         if (jrbEnvDados.isSelected()){
             jtfEnvio.setText(" ");
         }
         else if (jrbRecDados.isSelected()){
             jtfEnvio.setText("01+RQ+00+");
             jtpConfig.setVisible(true);  //Configurações de Qtde ou Status
             jtpConfig.setSelectedIndex(1);
         }
        }
        else if (jlstPacotes.isSelectedIndex(7)){
         jtaDescricao.setText (" ");
         jtaDescricao.append("                Prisma / Primme / PrimmeAcesso\n");
         jtaDescricao.append("\n");
         jtaDescricao.append("Enviar: Envia uma lista de cartões.\n");
         jtaDescricao.append("Exemplo: 01+ECAR+00+1+I[23[23[09/07/2012 " +
                 "08:00:01[09/07/2012 17:00:01[1[1[0[123[321[[BM[2[1[1[0[[0 " +
                 "Inclui o cartão.\n");
         jtaDescricao.append("\n");
         jtaDescricao.append("Receber: Recebe uma lista de cartões.\n");
         jtaDescricao.append("Exemplo: 01+RCAR+00+2]0 Recebe 2 cartões à partir" +
                 " do índice 0.\n");
         if (jrbEnvDados.isSelected()){
             jtfEnvio.setText("01+ECAR+00+1+A[1[1[09/07/2012 08:00:01[09/07/2012 " +
                     "17:00:01[1[1[0[123[321[[BM[2[1[1[0[[0");
         }
         else if (jrbRecDados.isSelected()){
             jtfEnvio.setText("01+RCAR+00+2]0");
         }
        }
        else if (jlstPacotes.isSelectedIndex(8)){
         jtaDescricao.setText (" ");
         jtaDescricao.append("                Prisma / Primme / PrimmeAcesso\n");
         jtaDescricao.append("\n");
         jtaDescricao.append("Enviar: Envia uma lista de grupos de acesso.\n");
         jtaDescricao.append("Exemplo: 01+EGA+00+1+I[000023[Grupo Equipe " +
                 "Suporte[01/01/2010 00:00:01[30/12/2012 23:59:59[2[1[1[[[0[[0[[0[[\n");
         jtaDescricao.append("\n");
         jtaDescricao.append("Receber: Recebe uma lista de grupos de acesso.\n");
         jtaDescricao.append("Exemplo: 01+RGA+00+2]0 Recebe 2 grupos de acesso " +
                 "à partir do índice 0.\n");
         if (jrbEnvDados.isSelected()){
             jtfEnvio.setText("01+EGA+00+1+I[000023[Grupo Equipe Suporte[01/01/2010 " +
                     "00:00:01[30/12/2012 23:59:59[2[1[1[[[0[[0[[0[[");
         }
         else if (jrbRecDados.isSelected()){
             jtfEnvio.setText("01+RGA+00+2]0");
         }
        }
        else if (jlstPacotes.isSelectedIndex(9)){
         jtaDescricao.setText (" ");
         jtaDescricao.append("                Prisma / Primme / PrimmeAcesso\n");
         jtaDescricao.append("\n");
         jtaDescricao.append("Enviar: Envia cartões de grupo de acesso.\n");
         jtaDescricao.append("Exemplo: 01+ECGA+00+1+I[000023[1\n");
         jtaDescricao.append("\n");
         jtaDescricao.append("Receber: Recebe cartões de grupo de acesso.\n");
         jtaDescricao.append("Exemplo: 01+RCGA+00+2]0 Recebe 2 cartões de " +
                 "grupos de acesso à partir do índice 0.\n");
         if (jrbEnvDados.isSelected()){
             jtfEnvio.setText("01+ECGA+00+1+I[000023[1");
         }
         else if (jrbRecDados.isSelected()){
             jtfEnvio.setText("01+RCGA+00+2]0");
         }
        }
        else if (jlstPacotes.isSelectedIndex(10)){
         jtaDescricao.setText (" ");
         jtaDescricao.append("                Prisma / Primme / PrimmeAcesso\n");
         jtaDescricao.append("\n");
         jtaDescricao.append("Enviar: Envia uma lista de acionamentos.\n");
         jtaDescricao.append("Exemplo: 01+EACI+00+1+I[13[Sirene Almoço[12:00:00" +
                 "[1[5[23456 Inclui o acionamento de 12:00:00 do rele 1 por 5 " +
                 "segundos de segunda à sexta.\n");
         jtaDescricao.append("\n");
         jtaDescricao.append("Receber: Recebe uma lista de acionamentos.\n");
         jtaDescricao.append("Exemplo: 01+RACI+00+2]0 Recebe 2 acionamentos à " +
                 "partir do índice 0.\n");
         if (jrbEnvDados.isSelected()){
             jtfEnvio.setText("01+EACI+00+1+I[13[Sirene Almoço[12:00:00[1[5[23456");
         }
         else if (jrbRecDados.isSelected()){
             jtfEnvio.setText("01+RACI+00+2]0");
         }
        }
        else if (jlstPacotes.isSelectedIndex(11)){
         jtaDescricao.setText (" ");
         jtaDescricao.append("                Prisma / Primme / PrimmeAcesso\n");
         jtaDescricao.append("\n");
         jtaDescricao.append("Enviar: Envia uma lista de períodos.\n");
         jtaDescricao.append("Exemplo: 01+EPER+00+1+I[13[13:00:00[19:00:00" +
                 "[234567 Inclui um período.\n");
         jtaDescricao.append("\n");
         jtaDescricao.append("Receber: Recebe uma lista de períodos.\n");
         jtaDescricao.append("Exemplo: 01+RPER+00+2]0 Recebe 2 peíodos à " +
                 "partir do índice 0.\n");
         if (jrbEnvDados.isSelected()){
             jtfEnvio.setText("01+EPER+00+1+I[13[13:00:00[19:00:00[234567");
         }
         else if (jrbRecDados.isSelected()){
             jtfEnvio.setText("01+RPER+00+2]0");
         }
        }
        else if (jlstPacotes.isSelectedIndex(12)){
         jtaDescricao.setText (" ");
         jtaDescricao.append("                Prisma / Primme / PrimmeAcesso\n");
         jtaDescricao.append("\n");
         jtaDescricao.append("Enviar: Envia uma lista de horários.\n");
         jtaDescricao.append("Exemplo: 01+EHOR+00+1+I[13[Horário da Tarde[1[13 " +
                 "Inclui um horário.\n");
         jtaDescricao.append("\n");
         jtaDescricao.append("Receber: Recebe uma lista de horários.\n");
         jtaDescricao.append("Exemplo: 01+RPER+00+2]0 Recebe 2 horários à " +
                 "partir do índice 0.\n");
         if (jrbEnvDados.isSelected()){
             jtfEnvio.setText("01+EHOR+00+1+I[13[Horário da Tarde[1[13");
         }
         else if (jrbRecDados.isSelected()){
             jtfEnvio.setText("01+RHOR+00+2]0");
         }
        }
        else if (jlstPacotes.isSelectedIndex(13)){
         jtaDescricao.setText (" ");
         jtaDescricao.append("                Prisma / Primme / PrimmeAcesso\n");
         jtaDescricao.append("\n");
         jtaDescricao.append("Enviar: Envia uma lista de feriados.\n");
         jtaDescricao.append("Exemplo: 01+EFER+00+1+I[01/01 Inclui dia 01/01" +
                 " como feriado.\n");
         jtaDescricao.append("\n");
         jtaDescricao.append("Receber: Recebe uma lista de feriados.\n");
         jtaDescricao.append("Exemlo: +RFER+00+1+0/1 Solicita a recepção de" +
                 " todos os feriados do mês 1.\n");
         if (jrbEnvDados.isSelected()){
             jtfEnvio.setText("01+EFER+00+1+I[01/01");
         }
         else if (jrbRecDados.isSelected()){
             jtfEnvio.setText("01+RFER+00+1+0/1");
         }
        }
        else if (jlstPacotes.isSelectedIndex(14)){
         jtaDescricao.setText (" ");
         jtaDescricao.append("                Prisma / Primme / PrimmeAcesso\n");
         jtaDescricao.append("\n");
         jtaDescricao.append("Enviar: Envia as mensagens padrões de entrada e saída.\n");
         jtaDescricao.append("Exemplo: 01+EMSG+00+2[Bem Vindo[5[[3[[5[ Envia a " +
                 "mensagem de entrada como: Bem Vindo e o nome do funcionário, " +
                 "e a de saída como: Saudação e o nome do do funcionário.\n");
         jtaDescricao.append("\n");
         jtaDescricao.append("Receber: Recebe as mensagens padrões de entrada e saída.\n");
         jtaDescricao.append("Exemplo: 01+RMSG+00\n");
         if (jrbEnvDados.isSelected()){
             jtfEnvio.setText("01+EMSG+00+2[Bem Vindo[5[[3[[5[");
         }
         else if (jrbRecDados.isSelected()){
             jtfEnvio.setText("01+RMSG+00");
         }
        }
        else if (jlstPacotes.isSelectedIndex(15)){
         jtpConfig.setVisible(true);
         jtpConfig.setSelectedIndex(2);
         jtaDescricao.setText (" ");
         jtaDescricao.append("                Prisma / Primme / PrimmeAcesso\n");
         jtaDescricao.append("\n");
         jtaDescricao.append("O evento online se ativará quando receber " +
                 "aguardando liberação do aparelho.\n");
         jtaDescricao.append("\n");
         jtaDescricao.append("Liberado: Indica que o evento foi validado e " +
                 "liberado. Em caso de catraca, libera ambos os lados.\n");
         jtaDescricao.append("\n");
         jtaDescricao.append("Negado: Acesso negado.\n");
         jtaDescricao.append("\n");
         jtaDescricao.append("Mensagem: Descrição da mensagem que será mostrada " +
                 "no equipamento.\n");
         jtaDescricao.append("\n");
         jtaDescricao.append("Tempo Rele / Msg: Tempo em que o equipamento " +
                 "mostra a mensagem e ativa o rele em segundos.\n");
         jtaDescricao.append("\n");
         jtaDescricao.append("Rele: Seleciona um grupo de rele que será ativado " +
                 "no aparelho.\n");
         jrbEnvDados.setText("Liberado");
         jrbRecDados.setText("Negado");
         documentListener(); //document listener do jtfLiberado
        }
        else if (jlstPacotes.isSelectedIndex(16)){
         jtpConfig.setVisible(true);
         jtpConfig.setSelectedIndex(3);
         jtaDescricao.setText (" ");
         jtaDescricao.append("                Prisma / Primme / PrimmeAcesso\n");
         jtaDescricao.append("\n");
         jtaDescricao.append("Diretório: Endereço \\ nome do arquivo.\n");
         jtaDescricao.append("Exemplo: C:\\Arquivos de programas\\Arquivo.txt\n");
         jtaDescricao.append("\n");
         jtaDescricao.append("Ler Arquivo: Começa a leitura do arquivo selecionado.\n");
         jtaDescricao.append("\n");
         jtaDescricao.append("Loop: Começa o processo de looping da leitura do " +
                 "arquivo selecionado, o número de repetições é igual a " +
                 "Quantidade de Loop ou infinita se caso o campo esteja " +
                 "marcado. Para parar o loop precione ESC.\n");
         jlbDiretorio.setVisible(true); //Componentes para Abrir Arquivo
         jtfDiretorio.setVisible(true);
         jbtnLerArquivo.setVisible(true);
         jbtnAbrir.setVisible(true);
         jtfEnvio.setText("");

        }
    }

    private void jbtnEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnEnviarActionPerformed
        boolean verNum = true;
        if (jchkConectar.isSelected()){ //verificar conexão{
            if (jlstPacotes.isSelectedIndex(15)){
                if (!(validarNumero(jtfTextoSeg.getText()))){
                    JOptionPane.showMessageDialog(null, "Digite um número válido de segundos!",
                        "Erro", JOptionPane.WARNING_MESSAGE);
                    jtfTextoSeg.setText("3");
                    verNum = false;
                }
            }
            if (verNum){
                try {
                    char[] data;
                    data = jtfEnvio.getText().toCharArray();
                    String str = "", aux = "";
                    str = textFormat(data);//formatando texto (cabeçalho, checksum e Byte final)
                    aux = stringHexFormat(str);//formatando para numero Hexadecimal
                    client.sendData(str.toCharArray());   //enviando dados
                    jtaDadosEnv.append(str+"\n\n");
                    jtaDadosBytesEnv.append(aux+"\n\n");
                } catch (Exception e) {
                }
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Precisa estar conectado para " +
                    "efetuar esta operação!","Erro", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jbtnEnviarActionPerformed

    private void jchkConectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jchkConectarActionPerformed
        if (jchkConectar.isSelected()) {
            client = new TcpClient(jtfIp.getText(),
                    Integer.valueOf(jtfPorta.getText()));
            client.connect();
            if (client.isConnected()){
              new Thread(new Runnable() {
                public void run() {
                    String aux2="";
                    try {
                        while (jchkConectar.isSelected()) {
                            if (client.availableData() > 0) {
                                char[] temp = client.receiveData(client.
                                        availableData()); //recebendo dados
                                String str = "", aux ="";
                                for (char chr : temp) {
                                    str += chr;
                                }
                                jtaDadosRec.append(str+"\n\n");
                                aux = stringHexFormat(str);
                                jtaDadosBytesRec.append(aux+"\n\n");
                                
                            }
                            Thread.sleep(500);  //esperando resposta
                            jlbConexao.setText("Conectado à: "+jtfIp.getText());
                        }
                    } catch (Exception e) {
                        
                    }
                    jchkConectar.setText("Conectado");
                    System.out.println(aux2);
                    jlbConexao.setText(aux2);
                }
              }).start();
            }else{
                jlbConexao.setText("Conexão não Estabelecida");
                jchkConectar.setSelected(false);
            }
            
            
        } else {
            client.disconnect();
            jchkConectar.setText("Conectar");
            jlbConexao.setText("Desconectado de: "+jtfIp.getText());
        }
    }//GEN-LAST:event_jchkConectarActionPerformed
  
    private void jlstPacotesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jlstPacotesMouseClicked
        // TODO add your handling code here:
        selectData();
    }//GEN-LAST:event_jlstPacotesMouseClicked

    private void jrbEnvDadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbEnvDadosActionPerformed
        // TODO add your handling code here:
        selectData();
    }//GEN-LAST:event_jrbEnvDadosActionPerformed

    private void jrbMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbMActionPerformed
        // TODO add your handling code here:
        jtaDescricao.setText (" ");
        jtaDescricao.append ("                         Prisma / Primme\n");
        jtaDescricao.append ("Enviar: Não possui função de envio.\n");
        jtaDescricao.append (" \n");
        jtaDescricao.append ("Receber: Solicita a recepção de registros à partir de um " +
                "endereço de memória.\nExemplo: 01+RR+00+M]2]0 Recebe 3 eventos " +
                "à partir do endereço de memória 0.\n");
        jtfEnvio.setText("01+RR+00+M]3]0");//sub-opções do item Registro
    }//GEN-LAST:event_jrbMActionPerformed

    private void jrbNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbNActionPerformed
        // TODO add your handling code here:
        jtaDescricao.setText (" ");
        jtaDescricao.append ("                         Prisma / Primme\n");
        jtaDescricao.append ("Enviar: Não possui função de envio.\n");
        jtaDescricao.append (" \n");
        jtaDescricao.append ("Receber: Solicita a recepção de registros à " +
                "partir de um NSR.\nExemplo: 01+RR+00+N]5]1 Recebe 5 " +
                "eventos contados à partir do NSR 1.\n");
        jtfEnvio.setText("01+RR+00+N]5]1");
    }//GEN-LAST:event_jrbNActionPerformed

    private void jrbDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbDActionPerformed
        // TODO add your handling code here:
        jtaDescricao.setText (" ");
        jtaDescricao.append ("                         Prisma / Primme\n");
        jtaDescricao.append ("Enviar: Não possui função de envio.\n");
        jtaDescricao.append (" \n");
        jtaDescricao.append ("Receber: Solicita a recepção de registros à " +
                "partir de uma data.\nExemplo: 01+RR+00+D]2]10/07/2012 08:00:01]" +
                " Recebe 2 eventos contados à partir do primeiro evento ocorrido" +
                " depois de 10/07/2012 08:00:01.\nObservação: Para o PrimmeAcesso" +
                " deve conter a data e hora inicial e final.\n");
        jtfEnvio.setText("01+RR+00+D]2]10/07/2012 08:00:01]");
    }//GEN-LAST:event_jrbDActionPerformed

    private void jrbTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbTActionPerformed
        // TODO add your handling code here:
        jtaDescricao.setText (" ");
        jtaDescricao.append ("                         Prisma / Primme\n");
        jtaDescricao.append ("Enviar: Não possui função de envio.\n");
        jtaDescricao.append (" \n");
        jtaDescricao.append ("Receber: Solicita a recepção dos registros." +
                "\nExemplo: 01+RR+00+T]5]1 Coletando 5 eventos à partir do índice 1.\n");
        jtfEnvio.setText("01+RR+00+T]5]1");
    }//GEN-LAST:event_jrbTActionPerformed

    private void jrbCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbCActionPerformed
        // TODO add your handling code here:
        jtaDescricao.setText (" ");
        jtaDescricao.append ("                         Prisma / Primme\n");
        jtaDescricao.append ("Enviar: Não possui função de envio.\n");
        jtaDescricao.append (" \n");
        jtaDescricao.append ("Receber: Solicita a recepção de registros que " +
                "ainda não foram coletados.\nExemplo: 01+RR+00+C]5]0 Coletando" +
                " apenas os 5 eventos que ainda foram coletados à partir do índice 0.\n");
        jtfEnvio.setText("01+RR+00+C]5]0");
    }//GEN-LAST:event_jrbCActionPerformed

    private void jbtnLimparRecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnLimparRecActionPerformed
        // TODO add your handling code here:
        jtaDadosRec.setText(" ");// limpando dados dos jTextAreas de Enviados
        jtaDadosBytesRec.setText(" ");
    }//GEN-LAST:event_jbtnLimparRecActionPerformed

    private void jbtnLimparEnvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnLimparEnvActionPerformed
        // TODO add your handling code here:
        jtaDadosEnv.setText(" ");// limpando dados dos jTextAreas de Recebidos
        jtaDadosBytesEnv.setText(" ");
    }//GEN-LAST:event_jbtnLimparEnvActionPerformed

    private void jbtnLerArquivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnLerArquivoActionPerformed
        // TODO add your handling code here:
        if (jchkConectar.isSelected()){ //verificar conexão
            gravarDados gd = new gravarDados();
            gd.start();
        }
        else{
            JOptionPane.showMessageDialog(null, "Precisa estar conectado para " +
                    "executar esta função!", "Conectar", JOptionPane.WARNING_MESSAGE);
       }
    }//GEN-LAST:event_jbtnLerArquivoActionPerformed

    private void jbtnHoraSistemaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnHoraSistemaActionPerformed
        // TODO add your handling code here:
        String str, aux;     //Recebendo data do sistema e formatando string
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yy hh:mm:ss");
        str = new String ("01+EH+00+"+dateFormat.format(new Date())
                +"]00/00/00]00/00/00");
        jtfEnvio.setText(str);
        if (jchkConectar.isSelected()){
            str = textFormat(str.toCharArray());//formatando texto (cabeçalho, checksum e Byte final)
            client.sendData(str.toCharArray());
            aux = stringHexFormat(str);//formatando para numero Hexadecimal
            jtaDadosEnv.append(str+"\n\n");
            jtaDadosBytesEnv.append(aux+"\n\n");
        }
        else{
            JOptionPane.showMessageDialog(null, "Precisa estar conectado para " +
                    "efetuar esta operação!","Erro", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jbtnHoraSistemaActionPerformed

    private void jrbUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbUActionPerformed
        // TODO add your handling code here:
        jtaDescricao.setText (" ");
        jtaDescricao.append ("                         Prisma / Primme\n");
        jtaDescricao.append ("\n");
        jtaDescricao.append ("Enviar: Não possui função de envio.\n");
        jtaDescricao.append ("\n");
        jtaDescricao.append ("Receber: Retorna a quantidade de usuários cadastrados.\n");
        jtfEnvio.setText("01+RQ+00+U");//Tabela de Configurações de Qtdes e Status
    }//GEN-LAST:event_jrbUActionPerformed

    private void jrbC2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbC2ActionPerformed
        // TODO add your handling code here:
        jtaDescricao.setText (" ");
        jtaDescricao.append ("                         Prisma / Primme\n");
        jtaDescricao.append ("\n");
        jtaDescricao.append ("Enviar: Não possui função de envio.\n");
        jtaDescricao.append ("\n");
        jtaDescricao.append ("Receber: Retorna a quantidade de cartões cadastrados.\n");
        jtfEnvio.setText("01+RQ+00+C");
    }//GEN-LAST:event_jrbC2ActionPerformed

    private void jrbD2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbD2ActionPerformed
        // TODO add your handling code here:
        jtaDescricao.setText (" ");
        jtaDescricao.append ("                         Prisma / Primme\n");
        jtaDescricao.append ("\n");
        jtaDescricao.append ("Enviar: Não possui função de envio.\n");
        jtaDescricao.append ("\n");
        jtaDescricao.append ("Receber: Retorna a quantidade de digitais cadastradas.\n");
        jtfEnvio.setText("01+RQ+00+D");
    }//GEN-LAST:event_jrbD2ActionPerformed

    private void jrbTDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbTDActionPerformed
        // TODO add your handling code here:
        jtaDescricao.setText (" ");
        jtaDescricao.append ("                         Prisma / Primme\n");
        jtaDescricao.append ("\n");
        jtaDescricao.append ("Enviar: Não possui função de envio.\n");
        jtaDescricao.append ("\n");
        jtaDescricao.append ("Receber: Retorna a quantidade total de digitais que o módulo suporta.\n");
        jtfEnvio.setText("01+RQ+00+TD");
    }//GEN-LAST:event_jrbTDActionPerformed

    private void jrbRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbRActionPerformed
        // TODO add your handling code here:
        jtaDescricao.setText (" ");
        jtaDescricao.append ("                         Prisma / Primme\n");
        jtaDescricao.append ("\n");
        jtaDescricao.append ("Enviar: Não possui função de envio.\n");
        jtaDescricao.append ("\n");
        jtaDescricao.append ("Receber: Retorna a quantidade de registros na memória.\n");
        jtfEnvio.setText("01+RQ+00+R");
    }//GEN-LAST:event_jrbRActionPerformed

    private void jrbRNCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbRNCActionPerformed
        // TODO add your handling code here:
        jtaDescricao.setText (" ");
        jtaDescricao.append ("                         Prisma / Primme\n");
        jtaDescricao.append ("\n");
        jtaDescricao.append ("Enviar: Não possui função de envio.\n");
        jtaDescricao.append ("\n");
        jtaDescricao.append ("Receber: Retorna a quantidade de registros não " +
                "coletados na memória.\n");
        jtfEnvio.setText("01+RQ+00+RNC");
    }//GEN-LAST:event_jrbRNCActionPerformed

    private void jrbTPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbTPActionPerformed
        // TODO add your handling code here:
        jtaDescricao.setText (" ");
        jtaDescricao.append ("                         Prisma / Primme\n");
        jtaDescricao.append ("\n");
        jtaDescricao.append ("Enviar: Não possui função de envio.\n");
        jtaDescricao.append ("\n");
        jtaDescricao.append ("Receber: Informa se o equipamento está bloqueado.\n");
        jtfEnvio.setText("01+RQ+00+TP");
    }//GEN-LAST:event_jrbTPActionPerformed

    private void jrbMRPEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbMRPEActionPerformed
        // TODO add your handling code here:
        jtaDescricao.setText (" ");
        jtaDescricao.append ("                         Prisma / Primme\n");
        jtaDescricao.append ("\n");
        jtaDescricao.append ("Enviar: Não possui função de envio.\n");
        jtaDescricao.append ("\n");
        jtaDescricao.append ("Receber: Informa se há erro ao comunicar com a MRP.\n");
        jtfEnvio.setText("01+RQ+00+MRPE");
    }//GEN-LAST:event_jrbMRPEActionPerformed

    private void jrbSEMPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbSEMPActionPerformed
        // TODO add your handling code here:
        jtaDescricao.setText (" ");
        jtaDescricao.append ("                         Prisma / Primme\n");
        jtaDescricao.append ("\n");
        jtaDescricao.append ("Enviar: Não possui função de envio.\n");
        jtaDescricao.append ("\n");
        jtaDescricao.append ("Receber: Indica se não há empregador cadastrado.\n");
        jtfEnvio.setText("01+RQ+00+SEMP");
    }//GEN-LAST:event_jrbSEMPActionPerformed

    private void jrbPPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbPPActionPerformed
        // TODO add your handling code here:
        jtaDescricao.setText (" ");
        jtaDescricao.append ("                         Prisma / Primme\n");
        jtaDescricao.append ("\n");
        jtaDescricao.append ("Enviar: Não possui função de envio.\n");
        jtaDescricao.append ("\n");
        jtaDescricao.append ("Receber: Informa se o sensor de pouco papel está ativado.\n");
        jtfEnvio.setText("01+RQ+00+PP");
    }//GEN-LAST:event_jrbPPActionPerformed

    private void jrbSPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbSPActionPerformed
        // TODO add your handling code here:
        jtaDescricao.setText (" ");
        jtaDescricao.append ("                         Prisma / Primme\n");
        jtaDescricao.append ("\n");
        jtaDescricao.append ("Enviar: Não possui função de envio.\n");
        jtaDescricao.append ("\n");
        jtaDescricao.append ("Receber: Informa se o equipamento está sem papel.\n");
        jtfEnvio.setText("01+RQ+00+SP");
    }//GEN-LAST:event_jrbSPActionPerformed

    private void jrbQPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbQPActionPerformed
        // TODO add your handling code here:
        jtaDescricao.setText (" ");
        jtaDescricao.append ("                         Prisma / Primme\n");
        jtaDescricao.append ("\n");
        jtaDescricao.append ("Enviar: Não possui função de envio.\n");
        jtaDescricao.append ("\n");
        jtaDescricao.append ("Receber: Retorna a quantidade de tickets que " +
                "podem ser impressos, o tamanho atual da bobina e o tamanho " +
                "total da bobina.\n");
        jtfEnvio.setText("01+RQ+00+QP");
    }//GEN-LAST:event_jrbQPActionPerformed

    private void jbtnAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnAbrirActionPerformed
        // TODO add your handling code here:
        jfcArquivo.setVisible(true);
        int returnVal = jfcArquivo.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
        File file = jfcArquivo.getSelectedFile();
        try {
          //Atribuindo o caminho do arquivo ao campo de Diretório
          jtfDiretorio.setText(file.getPath());
        } catch (Exception e) {
            System.out.println("problem accessing file"+file.getAbsolutePath());
        }
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_jbtnAbrirActionPerformed

    private void jbtnLoopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnLoopActionPerformed
        // TODO add your handling code here:
        if (jchkConectar.isSelected()){ //verificar conexão
            loop lp = new loop();
            lp.start();
        }
        else{
            JOptionPane.showMessageDialog(null, "Precisa estar conectado para " +
                    "executar esta função!", "Conectar", JOptionPane.WARNING_MESSAGE);
       }
    }//GEN-LAST:event_jbtnLoopActionPerformed

    private void jrbRecDadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbRecDadosActionPerformed
        // TODO add your handling code here:
        selectData();
    }//GEN-LAST:event_jrbRecDadosActionPerformed

    private void jchkRele1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jchkRele1ActionPerformed
        // TODO add your handling code here:
        changeTextField();
    }//GEN-LAST:event_jchkRele1ActionPerformed

    private void jchkRele2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jchkRele2ActionPerformed
        // TODO add your handling code here:
        changeTextField();
    }//GEN-LAST:event_jchkRele2ActionPerformed

    private void jchkRele3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jchkRele3ActionPerformed
        // TODO add your handling code here:
        changeTextField();
    }//GEN-LAST:event_jchkRele3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new FrmClient().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btngEnvRecDados;
    private javax.swing.ButtonGroup btngParametro;
    private javax.swing.ButtonGroup btngQdeStatus;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton jbtnAbrir;
    private javax.swing.JButton jbtnEnviar;
    private javax.swing.JButton jbtnHoraSistema;
    private javax.swing.JButton jbtnLerArquivo;
    private javax.swing.JButton jbtnLimparEnv;
    private javax.swing.JButton jbtnLimparRec;
    private javax.swing.JButton jbtnLoop;
    private javax.swing.JCheckBox jchkConectar;
    private javax.swing.JCheckBox jchkLoopInf;
    private javax.swing.JCheckBox jchkRele1;
    private javax.swing.JCheckBox jchkRele2;
    private javax.swing.JCheckBox jchkRele3;
    private javax.swing.JFrame jfProgresso;
    private javax.swing.JFrame jfSleep;
    private javax.swing.JFileChooser jfcArquivo;
    private javax.swing.JLabel jlbAguarde;
    private javax.swing.JLabel jlbBytesEnviados;
    private javax.swing.JLabel jlbBytesRecebidos;
    private javax.swing.JLabel jlbConexao;
    private javax.swing.JLabel jlbDescPcte;
    private javax.swing.JLabel jlbDiretorio;
    private javax.swing.JLabel jlbGif;
    private javax.swing.JLabel jlbIPServidor;
    private javax.swing.JLabel jlbLoopInf;
    private javax.swing.JLabel jlbMensagem;
    private javax.swing.JLabel jlbPacoteEnviado;
    private javax.swing.JLabel jlbPacotesDisp;
    private javax.swing.JLabel jlbPorcentagem;
    private javax.swing.JLabel jlbPorta;
    private javax.swing.JLabel jlbProcLoop;
    private javax.swing.JLabel jlbQtdeLoop;
    private javax.swing.JLabel jlbRele1;
    private javax.swing.JLabel jlbRele2;
    private javax.swing.JLabel jlbRele3;
    private javax.swing.JLabel jlbSegundos;
    private javax.swing.JLabel jlbStringEnviada;
    private javax.swing.JLabel jlbStringRecebida;
    private javax.swing.JLabel jlbTempoRM;
    private javax.swing.JLabel jlbX;
    private javax.swing.JLabel jlbY;
    private javax.swing.JList jlstPacotes;
    private javax.swing.JPanel jpArquivo;
    private javax.swing.JPanel jpConexao;
    private javax.swing.JPanel jpEnvio;
    private javax.swing.JPanel jpEventoOnline;
    private javax.swing.JPanel jpProgresso;
    private javax.swing.JPanel jpQtdeStatus;
    private javax.swing.JPanel jpRegistros;
    private javax.swing.JPanel jpSleep;
    private javax.swing.JProgressBar jpbProgresso;
    private javax.swing.JRadioButton jrbC;
    private javax.swing.JRadioButton jrbC2;
    private javax.swing.JRadioButton jrbD;
    private javax.swing.JRadioButton jrbD2;
    private javax.swing.JRadioButton jrbEnvDados;
    private javax.swing.JRadioButton jrbM;
    private javax.swing.JRadioButton jrbMRPE;
    private javax.swing.JRadioButton jrbN;
    private javax.swing.JRadioButton jrbPP;
    private javax.swing.JRadioButton jrbQP;
    private javax.swing.JRadioButton jrbR;
    private javax.swing.JRadioButton jrbRNC;
    private javax.swing.JRadioButton jrbRecDados;
    private javax.swing.JRadioButton jrbSEMP;
    private javax.swing.JRadioButton jrbSP;
    private javax.swing.JRadioButton jrbT;
    private javax.swing.JRadioButton jrbTD;
    private javax.swing.JRadioButton jrbTP;
    private javax.swing.JRadioButton jrbU;
    private javax.swing.JScrollPane jscrpDadosByteEnv;
    private javax.swing.JScrollPane jscrpDadosByteRec;
    private javax.swing.JScrollPane jscrpDadosEnv;
    private javax.swing.JScrollPane jscrpDescricao;
    private javax.swing.JScrollPane jscrpPacotes;
    private javax.swing.JScrollPane jspScroll;
    private javax.swing.JTextArea jtaDadosBytesEnv;
    private javax.swing.JTextArea jtaDadosBytesRec;
    private javax.swing.JTextArea jtaDadosEnv;
    private javax.swing.JTextArea jtaDadosRec;
    private javax.swing.JTextArea jtaDescricao;
    private javax.swing.JTextField jtfDiretorio;
    private javax.swing.JTextField jtfEnvio;
    private javax.swing.JTextField jtfIp;
    private javax.swing.JTextField jtfLiberado;
    private javax.swing.JTextField jtfPorta;
    private javax.swing.JTextField jtfQtdeLoop;
    private javax.swing.JTextField jtfTextoSeg;
    private javax.swing.JTabbedPane jtpConfig;
    // End of variables declaration//GEN-END:variables
   
}
